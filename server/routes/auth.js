const express = require('express');
const router = express.Router();
const axios = require('axios');
const spotifyService = require('../services/spotifyService');

// Generate Spotify authorization URL
router.get('/login', (req, res) => {
  try {
    const state = Math.random().toString(36).substring(7);
    const authUrl = spotifyService.generateAuthUrl(state);
    
    res.json({ 
      authUrl,
      state 
    });
  } catch (error) {
    console.error('Error generating auth URL:', error);
    res.status(500).json({ error: 'Failed to generate authorization URL' });
  }
});

// Handle Spotify callback
router.post('/callback', async (req, res) => {
  try {
    const { code } = req.body;
    
    if (!code) {
      return res.status(400).json({ error: 'Authorization code is required' });
    }

    const tokenData = await spotifyService.exchangeCodeForToken(code);
    
    res.json({
      access_token: tokenData.access_token,
      refresh_token: tokenData.refresh_token,
      expires_in: tokenData.expires_in
    });
  } catch (error) {
    console.error('Error handling callback:', error);
    res.status(500).json({ error: 'Failed to exchange authorization code' });
  }
});

// Get user's Spotify playlists
router.get('/playlists', async (req, res) => {
  try {
    const { access_token } = req.headers;
    
    if (!access_token) {
      return res.status(401).json({ error: 'Access token is required' });
    }

    const response = await axios.get('https://api.spotify.com/v1/me/playlists', {
      headers: {
        'Authorization': `Bearer ${access_token}`
      }
    });

    // Filter for auto-generated playlists
    const autoGeneratedPlaylists = response.data.items.filter(playlist => 
      spotifyService.isAutoGeneratedPlaylist(playlist)
    );

    res.json(autoGeneratedPlaylists);
  } catch (error) {
    console.error('Error fetching user playlists:', error);
    res.status(500).json({ error: 'Failed to fetch playlists' });
  }
});

module.exports = router;
