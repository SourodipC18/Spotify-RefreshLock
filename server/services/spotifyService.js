const axios = require('axios');

class SpotifyService {
  constructor() {
    this.clientId = process.env.SPOTIFY_CLIENT_ID;
    this.clientSecret = process.env.SPOTIFY_CLIENT_SECRET;
    this.redirectUri = process.env.SPOTIFY_REDIRECT_URI;
    this.accessToken = null;
    this.tokenExpiry = null;
  }

  // Get access token using client credentials flow
  async getAccessToken() {
    if (this.accessToken && this.tokenExpiry && Date.now() < this.tokenExpiry) {
      return this.accessToken;
    }

    try {
      const response = await axios.post('https://accounts.spotify.com/api/token', 
        'grant_type=client_credentials',
        {
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': `Basic ${Buffer.from(`${this.clientId}:${this.clientSecret}`).toString('base64')}`
          }
        }
      );

      this.accessToken = response.data.access_token;
      this.tokenExpiry = Date.now() + (response.data.expires_in * 1000);
      
      return this.accessToken;
    } catch (error) {
      console.error('Error getting Spotify access token:', error);
      throw new Error('Failed to get Spotify access token');
    }
  }

  // Get playlist data from Spotify
  async getPlaylist(playlistId, accessToken = null) {
    try {
      const token = accessToken || await this.getAccessToken();
      
      const response = await axios.get(`https://api.spotify.com/v1/playlists/${playlistId}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      return response.data;
    } catch (error) {
      console.error('Error fetching playlist:', error);
      throw new Error('Failed to fetch playlist from Spotify');
    }
  }

  // Get playlist tracks
  async getPlaylistTracks(playlistId, accessToken = null) {
    try {
      const token = accessToken || await this.getAccessToken();
      let allTracks = [];
      let nextUrl = `https://api.spotify.com/v1/playlists/${playlistId}/tracks`;

      while (nextUrl) {
        const response = await axios.get(nextUrl, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });

        allTracks = allTracks.concat(response.data.items);
        nextUrl = response.data.next;
      }

      return allTracks.map(item => ({
        id: item.track.id,
        name: item.track.name,
        artist: item.track.artists.map(artist => artist.name).join(', '),
        album: item.track.album.name,
        duration_ms: item.track.duration_ms,
        preview_url: item.track.preview_url,
        external_urls: {
          spotify: item.track.external_urls.spotify
        }
      }));
    } catch (error) {
      console.error('Error fetching playlist tracks:', error);
      throw new Error('Failed to fetch playlist tracks from Spotify');
    }
  }

  // Check if playlist is auto-generated
  isAutoGeneratedPlaylist(playlist) {
    const autoGeneratedNames = [
      'Daily Mix',
      'Discover Weekly',
      'Release Radar',
      'Made For You',
      'Your Time Capsule',
      'On Repeat',
      'Repeat Rewind'
    ];

    return autoGeneratedNames.some(name => 
      playlist.name.includes(name) || 
      playlist.description?.includes(name)
    );
  }

  // Generate authorization URL for user authentication
  generateAuthUrl(state) {
    const params = new URLSearchParams({
      response_type: 'code',
      client_id: this.clientId,
      redirect_uri: this.redirectUri,
      scope: 'playlist-read-private playlist-read-collaborative user-read-private',
      state: state
    });

    return `https://accounts.spotify.com/authorize?${params.toString()}`;
  }

  // Exchange authorization code for access token
  async exchangeCodeForToken(code) {
    try {
      const response = await axios.post('https://accounts.spotify.com/api/token',
        new URLSearchParams({
          grant_type: 'authorization_code',
          code: code,
          redirect_uri: this.redirectUri,
          client_id: this.clientId,
          client_secret: this.clientSecret
        }),
        {
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
          }
        }
      );

      return response.data;
    } catch (error) {
      console.error('Error exchanging code for token:', error);
      throw new Error('Failed to exchange authorization code for token');
    }
  }
}

module.exports = new SpotifyService();
